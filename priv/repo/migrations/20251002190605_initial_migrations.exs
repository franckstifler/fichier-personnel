defmodule EduCount.Repo.Migrations.InitialMigrations do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:sub_divisions, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :name, :text, null: false
      add :division_id, :uuid
    end

    create table(:regions, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
      add :name, :text, null: false
    end

    create unique_index(:regions, [:name], name: "regions_unique_name_index")

    create table(:personnels, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
      add :last_name, :text, null: false
      add :first_name, :text, null: false
      add :maiden_name, :text
      add :gender, :text, null: false
      add :date_of_birth, :date, null: false
      add :place_of_birth, :text, null: false
      add :matrimonial_status, :text, null: false
      add :children_count, :bigint, null: false, default: 0
      add :matricule, :text, null: false
      add :grade, :text, null: false
      add :professional_diploma, :text
      add :professional_diploma_option, :text
      add :language, :text, null: false
      add :degree_subject, :text
      add :other_diplomas, {:array, :map}
      add :fonction, :text, null: false
      add :first_effective_service_date, :date, null: false
      add :current_post_effective_service_date, :date, null: false
      add :telephone, :text
      add :email, :text

      add :sub_division_appointed_id,
          references(:sub_divisions,
            column: :id,
            name: "personnels_sub_division_appointed_id_fkey",
            type: :uuid,
            prefix: "public"
          )

      add :sub_division_of_origin_id,
          references(:sub_divisions,
            column: :id,
            name: "personnels_sub_division_of_origin_id_fkey",
            type: :uuid,
            prefix: "public"
          )
    end

    create unique_index(:personnels, [:matricule], name: "personnels_unique_matricule_index")

    create unique_index(:personnels, [:last_name, :first_name, :date_of_birth],
             name: "personnels_unique_name_dob_index"
           )

    create table(:divisions, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
    end

    alter table(:sub_divisions) do
      modify :division_id,
             references(:divisions,
               column: :id,
               name: "sub_divisions_division_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    create unique_index(:sub_divisions, [:name, :division_id],
             name: "sub_divisions_unique_name_index"
           )

    alter table(:divisions) do
      add :name, :text, null: false

      add :region_id,
          references(:regions,
            column: :id,
            name: "divisions_region_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false
    end

    create unique_index(:divisions, [:name, :region_id], name: "divisions_unique_name_index")
  end

  def down do
    drop_if_exists unique_index(:divisions, [:name, :region_id],
                     name: "divisions_unique_name_index"
                   )

    drop constraint(:divisions, "divisions_region_id_fkey")

    alter table(:divisions) do
      remove :region_id
      remove :name
    end

    drop_if_exists unique_index(:sub_divisions, [:name, :division_id],
                     name: "sub_divisions_unique_name_index"
                   )

    drop constraint(:sub_divisions, "sub_divisions_division_id_fkey")

    alter table(:sub_divisions) do
      modify :division_id, :uuid
    end

    drop table(:divisions)

    drop_if_exists unique_index(:personnels, [:last_name, :first_name, :date_of_birth],
                     name: "personnels_unique_name_dob_index"
                   )

    drop_if_exists unique_index(:personnels, [:matricule],
                     name: "personnels_unique_matricule_index"
                   )

    drop constraint(:personnels, "personnels_sub_division_appointed_id_fkey")

    drop constraint(:personnels, "personnels_sub_division_of_origin_id_fkey")

    drop table(:personnels)

    drop_if_exists unique_index(:regions, [:name], name: "regions_unique_name_index")

    drop table(:regions)

    drop table(:sub_divisions)
  end
end
